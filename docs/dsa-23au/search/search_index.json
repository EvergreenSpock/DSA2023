{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<pre><code>&lt;h1 style=\"text-align: center;\"&gt;\n&lt;span style=\"font-style: normal;\"&gt;&lt;strong style=\"font-family: inherit; font-size: 1.8em; color: var(--ic-brand-font-color-dark);\"&gt;\nWelcome to Data Structures and Algorithms, Autumn 2023\n&lt;/strong&gt;&lt;br /&gt;&lt;/span&gt;&lt;/h1&gt;\n&lt;h2&gt;Syllabus and Class Information&lt;/h2&gt;\n\n&lt;p&gt;\n  You can find our public class website &lt;a href=\"https://theevergreenstatecollege.github.io/upper-division-cs/dsa-23au/\"&gt;https://theevergreenstatecollege.github.io/upper-division-cs/dsa-23au/&lt;/a&gt;,\n  which is mirrored to our Canvas site at &lt;a href=\"https://canvas.evergreen.edu/courses/5926\"&gt;https://canvas.evergreen.edu/courses/5926&lt;/a&gt;.\n&lt;/p&gt;\n&lt;p&gt;\n  &lt;span&gt;\n    &lt;strong&gt;Our first class is on Tuesday Sept. 26th at 10am (PST) in Evans 2617 (Computer Center)\n    &lt;/strong&gt;&lt;br /&gt;\n  &lt;/span&gt;\n&lt;/p&gt;\n</code></pre> <p>         Data Structures and Algorithms is a 12-credit upper division applied Computer Science program that is important for doing any additional advanced work in computer science and software engineering. Some students in the program have already studied data structures (DS &amp; A). Those students will be creating their own curriculum in groups. For students who want to learn DS &amp; A, the program syllabus will look like this:         </p> <p> <ul> <li>Data Structures and Algorithms;</li> <li>Team programming projects (with ChangeMakers)</li> <li>Synthesis of real-world problems with software modeling</li> <li>Software Engineering</li> </ul> </p> <p>         As computer science students, you will deepen your technical knowledge and skills required to understand, analyze, modify, and build complex software systems. The concepts and skills from Data Structures and Algorithms are key for software engineering and programming. Through this program you will also deepen your understanding of computing systems, both in theory and practice. The work will provide prerequisite knowledge for Evergreen's advanced computer science programs.\u00a0         </p> <p>         Working on team projects is very important for almost any job, especially in computer science. Also, at Evergreen we expect students to take charge of their learning. We make this easier by providing\u00a0 a caring and safe innovative team environment. This is ideal for those looking for a practical, hands-on approach to learning. This radically different pathway gives students the opportunity to set-up and run their own projects and ventures. Inspired by the pioneering Finnish \u2018Tiimiakatemia\u2019 approach, we designed this program collaboratively with the ChangeMaker Lab, which was the first to introduce this approach in the United States. The Tiimiakatemia ChangeMaker Lab is accredited by Tiimiakatemia Global\u00ae.         </p> <p>         In the first few weeks you will form a Team Company of up to 20 students, and work on real projects and research the programming, software engineering, and theoretical\u00a0 skills needed for those projects. You will gain entrepreneurial experience and learn how to operate and run an organization as a Holacratic structure. As a Team Entrepreneur, you\u2019ll work with your team in your own office environment virtually or in the classroom in our innovative open office space.\u00a0 You will create and manage projects around your passions, attend directors' meetings. You will have the opportunity to learn the auxiliary skills to manage budgets and build valuable contacts and networks.\u00a0         </p> <p>         You will learn by doing and specifically develop the following job skills: Self\u2010leadership skills, Project leading skills, Planning skills, Team Coaching skills, Strategic skills, Team leadership skills, Service, negotiation and selling skills, Understanding of financial issues, Marketing skills, Innovation skills, Team leadership skills, Data processing and IT \u2013skills, Team Learning skills, Creativity skills, International skills and Communication skills and work on developing Initiative, Courage to make choices and goal orientation.         </p> <p>         This full-time daytime program will be taught on the Olympia campus. Students who need to participate fully remotely should contact the faculty to discuss that option.         </p> <p>         Computer technology has an impact on almost anything we do, and data structures and algorithms are central to advanced study in computer science and to building large complex systems. When applying for positions such as Software Developer or Software Engineer, you will probably find that this program is the most important in helping you prepare for job interviews. In this program, you\u2019ll learn about ways to organize data (we\u2019ll see various data structures such as Lists, Trees, Graphs), ways to compare algorithms (we\u2019ll focus on space and time complexity using big Oh) and efficiently solve programming problems. It will also give you a chance to practice object-oriented and functional programming.         </p> <p>         We are so excited to work with all of you in this awesome program.         </p> <p>         We expect everyone to attend in person, unless you contact us to make alternative arrangements.         </p> class meeting times. You can find the information in the Syllabus. <p>Monday</p> <p>Tuesday</p> <p>Wednesday</p> <p>Thursday</p> <p>Friday</p> 10am-1pm <p>Data Structures</p> <p>(Evans 2617)</p> <p>Systems and Teams</p> <p>(Evans 2617)</p> <p> </p> <p></p> <p>Data Structures</p> <p>(Evans 2617)</p> <p> </p> <p></p> 12noon-1pm <p> </p> <p></p> <p>Forest Walk</p> <p></p> <p>&amp;nbps;</p> <p></p> <p>break</p> <p></p> <p>tutoring</p> <p></p> 1-3pm <p>Cracking the Coding Interview / Software Engineering</p> <p>(Evans 2617)</p> <p>ChangeMaker Lab</p> <p>Sem2 C4105</p> <p> </p> <p></p> <p>ChangeMaker Lab</p> <p>Sem2 C4105</p> <p> </p> <p></p> 3-5pm <p> </p> <p></p> <p>ChangeMaker Lab</p> <p>Sem2 C4105</p> <p> </p> <p></p> <p>ChangeMaker Lab</p> <p>Sem2 C4105</p> <p> </p> <p></p> <p> </p> <p>Textbooks:</p> <p>Required</p> <ul> <li>The Algorithm Design Manual, 3rd edition, by Steven Skiena ()</li> <li>Cracking the Coding Interview \u2013 189 programming questions and solutions, Gayle Laakmann McDowell, 6th edition (CCI)ISBN-13: 978-0984782857 </li> </ul> <p>Optional</p> <ul> <li>Data Structures and Algorithms in Java, 3rd or 4th edition, by Mark Allen Weiss</li> <li>Dive into Systems (DIS)\u00a0 Dive Into Systems Text: https://diveintosystems.org/development/antora/diveintosystems/1.0/index.html</li> <li>The Mythical Man-Month, Fred Brooks</li> <li>Parallel computing for Beginners https://www.learnpdc.org/PDCBeginners2e/</li> </ul> Concrete Examples Synthesis / Lateral Thinking Week 1 <p>A Self-Guided Tour</p> <p>RAM Model, Lists</p> <p>Arrays, Links, Counters</p> <p>Interfaces, CRUD Operations</p> <p>IntelliJ and Git: practice and warmup</p> <p>Pair Programming: what roles? what rules?</p> <p>Learning Log, ChatGPT / AI prompting</p> <p>ChangeMaker teams, learning together</p> Week 2 <p>Implementation vs. Interfaces</p> <p>Stacks, Queues</p> <p>Key-Value Maps, Hashing</p> <p>Collisions, Links</p> <p>Time-Space and Other Dualities, Resources</p> <p>How to trade off time for space, vice versa?</p> <p>Combining two or more data structures</p> <p>Counting and visualizing resources: VisualVM</p> Week 3 <p>Asymptotic Analysis (Big O)</p> <p>Trees, Relations, Searching</p> <p>Traversals: Bread-first, Depth-First</p> <p>Heaps (Priority Queues)</p> <p>Recursion and Iteration</p> <p>Cleaning Up: Invariants, Rebalancing</p> <p>Combining two or more data structures</p> <p>Overview of Final Project: Problem-Finding</p> Week 4 <p>Rebalancing Trees</p> <p>Red-Black Trees</p> <p>Rebalancing Heaps</p> <p>Inventing New Data Structures</p> <p>An Exotic Zoo: Fibonacci Forest, Skip Lists</p> <p>Amortized Analysis</p> <p>Combining two or more data structures</p> <p>Final Project Work: Collecting / Mocking Datasets</p> Week 5 <p>Maximum Subset Sum</p> <p>Dynamic Programming</p> <p>Interval Scheduling</p> <p>Satisficing (Greedy)</p> <p>Subproblems</p> <p>Memoizing / Caching</p> <p>Combining two or more algorithms</p> <p>Final Project Work: Collecting Datasets</p> Week 6 <p>Graphs</p> <p>Topological Sort, Dependencies</p> <p>Shortest Path (Dijkstra's)</p> <p>Network Flow</p> <p>MapQuest / Google Maps</p> <p>Find algorithms in the news</p> <p>Final Project Work: Designing Operations</p> <p>AI proompting and co-pilot: write code</p> Week 7 <p>Sorting, with Heaps and Trees</p> <p>Merge Sort</p> <p>Quicksort</p> <p>Radix Sort</p> <p>Randomized analysis</p> <p>Combining two sorts</p> <p>Joke Sorts: delay as much as possible</p> <p>Art: Pixel sorting</p> Week 8 <p>Database Indexes, Search</p> <p>Page Rank</p> <p>Linear Systems of Equations</p> <p>Constraint Satisfaction</p> <p>Boggle / Scrabble</p> <p>Final Project Work: Analysis and Correctness</p> <p>Find linear systems / constraints in real-life</p> <p>Connect DS &amp; A to another discipline</p> Week 9 <p>Karatsuba / Matrix Multiplication</p> <p>Divide and Conquer</p> <p>Streaming Algorithms</p> <p>Parallel Merge Sort</p> <p>Data Privacy</p> <p>Find algorithms in the news</p> <p>Parallelize a previous algorithm</p> <p>Final Project Work: Analysis and Correctness</p> Week 10 <p>Bonus Topics / Catchup Week</p> <p>Quantum DS &amp; A</p> <p>Recommender Systems</p> <p>Collaborative Filtering</p> <p>Finding Real World Examples: Go Local, Go Deep</p> <p>Final Project Work</p> <p>Synthesizing notes\u00a0</p> View Course Stream View Course Analytics View Course Notifications Coming Up View Calendar <ul> <li>Nothing for the next week</li> </ul> <p> </p> START HERE <p>Or click on Modules in menu at left to view list.</p>"},{"location":"syllabus/","title":"Syllabus","text":"<p>Welcome to Data Structures and Algorithms</p> <p>Read our\u00a0syllabus\u00a0to get oriented to the program</p> <p>Our first class is on Tuesday Sept. 26th at 10am (PST) in Evans 2617 (Computer Center)</p> <p>Data Structures and Algorithms is a 12-credit upper division applied Computer Science program that is important for doing any additional advanced work in computer science and software engineering. Some students in the program have already studied data structures (DS &amp; A). Those students will be creating their own curriculum in groups. For students who want to learn DS &amp; A, the program syllabus will look like this:</p> <ul> <li>Data Structures and Algorithms;</li> <li>Team programming projects (with ChangeMakers)</li> <li>Synthesis of real-world problems with software modeling</li> <li>Software Engineering</li> </ul> <p>As computer science students, you will deepen your technical knowledge and skills required to understand, analyze, modify, and build complex software systems. The concepts and skills from Data Structures and Algorithms are key for software engineering and programming. Through this program you will also deepen your understanding of computing systems, both in theory and practice. The work will provide prerequisite knowledge for Evergreen's advanced computer science programs.\u00a0</p> <p>Working on team projects is very important for almost any job, especially in computer science. Also, at Evergreen we expect students to take charge of their learning. We make this easier by providing\u00a0 a caring and safe innovative team environment. This is ideal for those looking for a practical, hands-on approach to learning. This radically different pathway gives students the opportunity to set-up and run their own projects and ventures. Inspired by the pioneering Finnish \u2018Tiimiakatemia\u2019 approach, we designed this program collaboratively with the ChangeMaker Lab, which was the first to introduce this approach in the United States. The Tiimiakatemia ChangeMaker Lab is accredited by Tiimiakatemia Global\u00ae.</p> <p>In the first few weeks you will form a Team Company of up to 20 students, and work on real projects and research the programming, software engineering, and theoretical\u00a0 skills needed for those projects. You will gain entrepreneurial experience and learn how to operate and run an organization as a Holacratic structure. As a Team Entrepreneur, you\u2019ll work with your team in your own office environment virtually or in the classroom in our innovative open office space.\u00a0 You will create and manage projects around your passions, attend directors' meetings. You will have the opportunity to learn the auxiliary skills to manage budgets and build valuable contacts and networks.\u00a0</p> <p>You will learn by doing and specifically develop the following job skills: Self\u2010leadership skills, Project leading skills, Planning skills, Team Coaching skills, Strategic skills, Team leadership skills, Service, negotiation and selling skills, Understanding of financial issues, Marketing skills, Innovation skills, Team leadership skills, Data processing and IT \u2013skills, Team Learning skills, Creativity skills, International skills and Communication skills and work on developing Initiative, Courage to make choices and goal orientation.</p> <p>This full-time daytime program will be taught on the Olympia campus. Students who need to participate fully remotely should contact the faculty to discuss that option.</p> <p>Computer technology has an impact on almost anything we do, and data structures and algorithms are central to advanced study in computer science and to building large complex systems. When applying for positions such as Software Developer or Software Engineer, you will probably find that this program is the most important in helping you prepare for job interviews. In this program, you\u2019ll learn about ways to organize data (we\u2019ll see various data structures such as Lists, Trees, Graphs), ways to compare algorithms (we\u2019ll focus on space and time complexity using big Oh) and efficiently solve programming problems. It will also give you a chance to practice object-oriented and functional programming.</p> <p>We are so excited to work with all of you in this awesome program.</p> <p>We expect everyone to attend in person, unless you contact us to make alternative arrangements.</p> class meeting times. You can find the information in the Syllabus. <p> </p> <p>Monday</p> <p>Tuesday</p> <p>Wednesday</p> <p>Thursday</p> <p>Friday</p> <p>10-12</p> <p>Data Structures</p> <p>(Evans 2617)</p> <p> Systems and Teams</p> <p>(Evans 2617)</p> <p> </p> <p>Data Structures</p> <p>(Evans 2617)</p> <p> </p> <p> </p> <p>12-1</p> <p> </p> <p>Forest Walk</p> break <p>tutoring</p> <p>1-3</p> <p>Cracking the Coding Interview/ Software Engineering</p> <p>(Evans 2617)</p> <p>ChangeMaker</p> <p>Lab</p> <p>Sem2 C4105</p> <p>ChangeMaker</p> <p>Lab</p> <p>Sem2 C4105</p> <p> </p> <p>3-5</p> <p> </p> <p>ChangeMaker</p> <p>Lab</p> <p> </p> <p>ChangeMaker</p> <p>Lab</p> <p> </p> <p> </p> <p>Textbooks:</p> <p>Required</p> <ul> <li>The Algorithm Design Manual, 3rd edition, by Steven Skiena ()</li> <li>Cracking the Coding Interview \u2013 189 programming questions and solutions, Gayle Laakmann McDowell, 6th edition (CCI)ISBN-13: 978-0984782857 </li> </ul> <p>Optional</p> <ul> <li>Data Structures and Algorithms in Java, 3rd or 4th edition, by Mark Allen Weiss</li> <li>Dive into Systems (DIS)\u00a0 Dive Into Systems Text: https://diveintosystems.org/development/antora/diveintosystems/1.0/index.html</li> <li>The Mythical Man-Month, Fred Brooks</li> <li>Parallel computing for Beginners https://www.learnpdc.org/PDCBeginners2e/</li> </ul> Concrete Examples Synthesis / Lateral Thinking Week 1 <p>A Self-Guided Tour</p> <p>RAM Model, Lists</p> <p>Arrays, Links, Counters</p> <p>Interfaces, CRUD Operations</p> <p>IntelliJ and Git: practice and warmup</p> <p>Pair Programming: what roles? what rules?</p> <p>Learning Log, ChatGPT / AI prompting</p> <p>ChangeMaker teams, learning together</p> Week 2 <p>Implementation vs. Interfaces</p> <p>Stacks, Queues</p> <p>Key-Value Maps, Hashing</p> <p>Collisions, Links</p> <p>Time-Space and Other Dualities, Resources</p> <p>How to trade off time for space, vice versa?</p> <p>Combining two or more data structures</p> <p>Counting and visualizing resources: VisualVM</p> Week 3 <p>Asymptotic Analysis (Big O)</p> <p>Trees, Relations, Searching</p> <p>Traversals: Bread-first, Depth-First</p> <p>Heaps (Priority Queues)</p> <p>Recursion and Iteration</p> <p>Cleaning Up: Invariants, Rebalancing</p> <p>Combining two or more data structures</p> <p>Overview of Final Project: Problem-Finding</p> Week 4 <p>Rebalancing Trees</p> <p>Red-Black Trees</p> <p>Rebalancing Heaps</p> <p>Inventing New Data Structures</p> <p>An Exotic Zoo: Fibonacci Forest, Skip Lists</p> <p>Amortized Analysis</p> <p>Combining two or more data structures</p> <p>Final Project Work: Collecting / Mocking Datasets</p> Week 5 <p>Maximum Subset Sum</p> <p>Dynamic Programming</p> <p>Interval Scheduling</p> <p>Satisficing (Greedy)</p> <p>Subproblems</p> <p>Memoizing / Caching</p> <p>Combining two or more algorithms</p> <p>Final Project Work: Collecting Datasets</p> Week 6 <p>Graphs</p> <p>Topological Sort, Dependencies</p> <p>Shortest Path (Dijkstra's)</p> <p>Network Flow</p> <p>MapQuest / Google Maps</p> <p>Find algorithms in the news</p> <p>Final Project Work: Designing Operations</p> <p>AI proompting and co-pilot: write code</p> Week 7 <p>Sorting, with Heaps and Trees</p> <p>Merge Sort</p> <p>Quicksort</p> <p>Radix Sort</p> <p>Randomized analysis</p> <p>Combining two sorts</p> <p>Joke Sorts: delay as much as possible</p> <p>Art: Pixel sorting</p> Week 8 <p>Database Indexes, Search</p> <p>Page Rank</p> <p>Linear Systems of Equations</p> <p>Constraint Satisfaction</p> <p>Boggle / Scrabble</p> <p>Final Project Work: Analysis and Correctness</p> <p>Find linear systems / constraints in real-life</p> <p>Connect DS &amp; A to another discipline</p> Week 9 <p>Karatsuba / Matrix Multiplication</p> <p>Divide and Conquer</p> <p>Streaming Algorithms</p> <p>Parallel Merge Sort</p> <p>Data Privacy</p> <p>Find algorithms in the news</p> <p>Parallelize a previous algorithm</p> <p>Final Project Work: Analysis and Correctness</p> Week 10 <p>Bonus Topics / Catchup Week</p> <p>Quantum DS &amp; A</p> <p>Recommender Systems</p> <p>Collaborative Filtering</p> <p>Finding Real World Examples: Go Local, Go Deep</p> <p>Final Project Work</p> <p>Synthesizing notes\u00a0</p> View Course Stream View Course Analytics View Course Notifications Coming Up View Calendar <ul> <li>Nothing for the next week</li> </ul> <p> </p> START HERE <p>Or click on Modules in menu at left to view list.</p>"},{"location":"chapter-01/2023-09-25/","title":"Week 1 - Day 1","text":""},{"location":"chapter-01/2023-09-25/#26-september-2023","title":"26 September 2023","text":""},{"location":"chapter-01/2023-09-25/#handouts","title":"Handouts","text":"<p>On paper, because technology may not work. Class syllabus. Short survey of students and their background, GitHub username, goals for learning DSA.</p>"},{"location":"chapter-01/2023-09-25/#faculty-introductions","title":"Faculty Introductions","text":"<p>Richard Weiss. weissr@evergreen.edu</p> <p>Paul Pham. paul.pham@evergreen.edu</p>"},{"location":"chapter-01/2023-09-25/#class-schedule","title":"Class Schedule","text":"<p>For the first week, and for rest of quarter.</p>"},{"location":"chapter-01/2023-09-25/#assignment-1-due-friday-at-3pm-on-github","title":"Assignment 1 Due Friday, at 3pm on GitHub","text":"<p>Check Canvas. Set up your GitPod development environment. Become familiar with the class monorepo.</p>"},{"location":"chapter-01/asymptotic/","title":"Asymptotic Analysis","text":"<p>Infinity is a mysterious entity in mathematics. In addition to having the property of being larger than any real number, it helps define behaviors at a limit, for example, series of numbers that proceed in an algorithmic way:</p> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] <p>there is usually a formula to proceed from </p>"},{"location":"chapter-01/chapter_1/","title":"Intro---Duality---Five Problems","text":""},{"location":"chapter-01/chapter_1/#the-duality-of-time-and-space","title":"The Duality of Time and Space","text":"<p>Exercise: * Pick a duality from another science, area of knowledge, popular culture, your favorite movies and books. Describe how the duals complement and define each other, what role balance plays, and how you can tradeoff one dual for another.</p>"},{"location":"chapter-01/chapter_1/#five-problems","title":"Five Problems","text":""},{"location":"chapter-01/chapter_1/#satisfiability","title":"Satisfiability","text":"<p>Satisfaction is </p>"},{"location":"chapter-01/chapter_1/#knapsack","title":"Knapsack","text":""},{"location":"chapter-01/chapter_1/#classifier","title":"Classifier","text":""},{"location":"chapter-01/chapter_1/#go-endgames","title":"Go Endgames","text":""},{"location":"chapter-01/chapter_1/#reinforcement-learning","title":"Reinforcement Learning","text":""},{"location":"chapter-01/chapter_1/#asymptotic-analysis","title":"Asymptotic Analysis","text":""},{"location":"chapter-01/chapter_1/#time-and-its-growth","title":"Time and its Growth","text":""},{"location":"chapter-01/chapter_1/#space-and-its-growth","title":"Space and its Growth","text":""},{"location":"chapter-01/chapter_1/#the-ram-model","title":"The RAM Model","text":"<p>In Donald Knuth's classic and neverending text, The Art of Computer Programming, he invents and uses an imaginary assembly language called MMIX. Some programmers may think that assembly language is too low level and has no bearing on analyzing algorithms day to day, and they have a point: you don't need to  understand the laws of quantum physics to use a computer, and yet this daily task rests on a foundation of electrons tunneling between semiconductors of different types.</p> <p>[insert picture of RAM DIMMs] [insert picture of RAM grid]</p> <p>Underlying all algorithmic analysis on all modern computers that you can use today is the RAM Model, which stands for (Random Access Memory). Other than being the greatest techno album of all time from Daft Punk, Random Access Memory means that \"constant-time access to any address.\" Whether you want to  read address </p>"},{"location":"chapter-01/chapter_1/#arrays","title":"Arrays","text":"<p>An array is the \"bare metal\" of the RAM Model, the ur-data-structure. It is the most direct access that programmers have to the underlying hardware because it behaves exactly as the memory circuits do: it's a vast contiguous grid of memory locations in sequential order, with address bits being input, and the corresponding data bits being output (if it's a read-only operation) or with data bits being input to overwrite the existing data (if it's a write operation).</p> <p>Think of arrays as a row of lockers or house addresses on a street, with the quirk that the addresses start at 0. The reason is that </p>"},{"location":"chapter-01/chapter_1/#links","title":"Links","text":""},{"location":"chapter-01/chapter_1/#single-double-and-more","title":"Single, Double, and More","text":""},{"location":"chapter-02/chapter_2/","title":"Chapter 2: Trees---Heaps---CRUD","text":""},{"location":"chapter-03/chapter_3/","title":"Chapter 3: Greed---Satisficing---Optimality","text":""},{"location":"chapter-03/chapter_3/#spaced-repetition","title":"Spaced Repetition","text":"<p>Chadwick picks glumly at his calzone.</p> <p>\"What's wrong now, stuck in a filter bubble of doom?\" Idris asks.</p> <p>His friend chuckles weakly. \"Close. I have that big algorithms exam coming up in six weeks, and I'm having trouble remembering everything. I think I've reached the biological limits of my memory.\"</p> <p>Idris snorts. \"You know, neuroscience hasn't discovered such a limit. Neurogenesis is just  a theory, but there is some evidence that adults keep generating new brain cells even after age 25. That limit is just a scientific urban legend.\"</p> <p>\"You mean I can just remember things infinitely if I try hard enough?\"</p> <p>\"Not by brute force. But have you heard of this technique called spaced repetition?\"</p> <p>\"Is that what NASA calls its program of sending space probes out to die in the utter vacuum of the cosmos?\"</p> <p>\"Oh look who's got jokes now. No dumbass, spaced repetition is a theory of learning that says if have a structured schedule of learning concepts, you can repeat them again at longer and longer intervals. Every day in the schedule, you can learn something new or repeat a previous concept. At first you repeat it the next day, then in three days, then seven, and so on.. basically forever if you can keep track of it.\"</p> <p>Chadwick muses this. \"Is the schedule different for everyone, or the same?\"</p> <p>\"That's a good question, I don't know. That would be a great dissertation for an education major. Say weren't you seeing that hottie who was getting a Master's in Teaching...\"</p> <p>\"Let's stay on topic,\" Chadwick waved off his friend's attempt to get details. \"Spaced repetition. So if I have six weeks, how many days of information can I learn?\"</p> <p>\"Enough handwaving, let's get serious,\" Idris knocks all the stray potato chip wrappers, energy drink bottles, and clutter off the desk and grabs an empty sheet of paper. He clicks open his pen. \"Let's give these variables names. First, let's label the Day 1 material.\"</p> <p>$1, ..., 1, ..., ..., 1, ..., ..., ..., ..., 1, ..., $</p> <p>Let's call a day's worth of learning material a Bok.</p> <p>Why not a Book?</p> <p>\"What are you, chicken?\"</p> <p>\"Have you heard of spaced repetitino?\"</p> <p>Let's say the schedule for each day is given by the term \\(x_{i,j}\\), where \\(i\\) is the  material for Day \\(i\\) and \\(j\\) is the iteration. So the first time you learn the material Day 1 is</p> <p>\\(x_{1,1}\\)</p> <p>and the allowed gap until the next iteration from \\(x_{i,j}\\) is between \\(a x_{i,j}\\) and  $(a+1) x_{i,j}. So the second time you learn the material Day 1 is </p> <p>\\(a x_{1,1} \\le x_{1,2} \\le (a+1) x_{1,1}\\)</p> <p>Let's say you schedule each day's repetition \\(x_{i,j}\\) in the earliest free slot in the  range, but you also want to maximize the amount of material that you learn. Let's also say  \\(k\\) repetitions are sufficient for you to remember something for the test.</p> <p>If you have \\(n\\) days, how many days \"Now, all the \\(...\\) are empty days where you can learn new material.\"</p> <p>\"But have you heard of spaced repetition?\"</p> <p>\"Isn't that when you have to say something twice for someone who isn't paying attention? Very funny. Now let's label day 2 material.\"</p> <p>$1, 2, 1, 2, ..., 1, 2, ..., ..., ..., 1, 2, $</p> <p>So on Day 1, you learn Bok 1, on Day 2, you learn Bok 2, and so forth, pushing more and more  new Boks for the first time until you reach Day \\(a\\), when you have to repeat Bok 1 again  or  you'll have to start its schedule over from scratch. This time, you got to repeat Boks 1 through \\(a\\)  on Days \\(a+1\\) through \\(a+a\\), or \\(2a\\), and then you have room for another \\(a\\) new Boks until you  have to repeat Bok 1 again. So that's \\(m == 2a\\) Boks so far, if \\(n\\) is \\(4a\\), and \\(k\\) is 2.</p> <p>Okay, I'm starting to see a pattern. So let's say \\(n\\) is 6 weeks, or \\(6 \\times 7 = 63\\) days.</p> <p>Then we rearrange </p> <ol> <li>second</li> <li>third</li> </ol>"},{"location":"chapter-04/chapter_4/","title":"Chapter 4: Caching---Subdividing---Recursion","text":""},{"location":"chapter-05/chapter_5/","title":"Chapter 5: Graphs---Clustering","text":""},{"location":"chapter-06/chapter_6/","title":"Chapter 6: Paths---Flows","text":""},{"location":"chapter-07/chapter_7/","title":"Chapter 7: Sorting---Sampling","text":""},{"location":"chapter-08/chapter_8/","title":"Chapter 8: Parallel---Distributed---Quantum","text":""},{"location":"chapter-09/chapter_9/","title":"Chapter 9: Outro---Five Systems","text":""}]}