{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About This Course","text":"<p>This course is designed for teaching at The Evergreen State College in Olympia, Washington, in the United States during Fall Quarter of 2023. The material for data structures and algorithms is often requested, and included, in computer science curricula in colleges, codeschools, online learning platforms, and bookshelves. In Neil Gaiman's novel American Gods, the deities and spirits of Old World religions transform into real humans, sometimes with mundane lives and jobs, when their believers bring them to America. Some lose favor to New Gods of technology, some continue to grow in prestige, some quietly continue to serve.</p> <p>Data structures and algorithms are like these spiritual constructs in the form of analytical tools. Programmers need them to solve problems, and so they appear in every new programming langauge from workhorses like C/C++, the expressive and dynamic Javascript and Python, the Java Virtual Machine family of langauges, improved systems and tooling languages like Rust and Golang, academic and research-oriented languages like Haskell and Ocaml. If they are not built into the language as reserved keywords, they manifest as a standard library that is included in  most distributions, or they appear in third-party libraries as the community seeks to advance their language and experiment with the right programming metaphors and idioms.</p> <p>Structured data and algorithmic processing are  I hope to add to the presentation of these important topics their continued expression and service, to building i</p> <p>y bring and incarnate them into each new programming language. and bring They occupy an ethereal role,</p> <p>The needs I see fall into three broad categories, and often people have more than one of them:</p> <ul> <li>An attraction to ordered and disciplined thinking. People have been performing tasks </li> <li>To prepare for and pass technical interviews to get a job</li> <li>, and I hope to present it </li> </ul>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#textbooks","title":"Textbooks","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"chapter1-asymptotic/","title":"Asymptotic Analysis","text":"<p>Infinity is a mysterious entity in mathematics. In addition to having the property of being larger than any real number, it helps define behaviors at a limit, for example, series of numbers that proceed in an algorithmic way:</p> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] <p>there is usually a formula to proceed from </p>"},{"location":"chapter1/","title":"Intro -- Guidestone Problems","text":""},{"location":"chapter1/#analysis-of-data-structures","title":"Analysis of Data Structures","text":""},{"location":"chapter1/#analysis-of-algorithms","title":"Analysis of Algorithms","text":""},{"location":"chapter-01/chapter_1/","title":"Chapter 1: Intro---Duality---Five Problems","text":""},{"location":"chapter-01/chapter_1/#the-duality-of-time-and-space","title":"The Duality of Time and Space","text":"<p>Exercise: * Pick a duality from another science, area of knowledge, popular culture, your favorite movies and books. Describe how the duals complement and define each other, what role balance plays, and how you can tradeoff one dual for another.</p>"},{"location":"chapter-01/chapter_1/#five-problems","title":"Five Problems","text":""},{"location":"chapter-01/chapter_1/#satisfiability","title":"Satisfiability","text":"<p>Satisfaction is </p>"},{"location":"chapter-01/chapter_1/#knapsack","title":"Knapsack","text":""},{"location":"chapter-01/chapter_1/#classifier","title":"Classifier","text":""},{"location":"chapter-01/chapter_1/#go-endgames","title":"Go Endgames","text":""},{"location":"chapter-01/chapter_1/#reinforcement-learning","title":"Reinforcement Learning","text":""},{"location":"chapter-01/chapter_1/#asymptotic-analysis","title":"Asymptotic Analysis","text":""},{"location":"chapter-01/chapter_1/#time-and-its-growth","title":"Time and its Growth","text":""},{"location":"chapter-01/chapter_1/#space-and-its-growth","title":"Space and its Growth","text":""},{"location":"chapter-01/chapter_1/#the-ram-model","title":"The RAM Model","text":"<p>In Donald Knuth's classic and neverending text, The Art of Computer Programming, he invents and uses an imaginary assembly language called MMIX. Some programmers may think that assembly language is too low level and has no bearing on analyzing algorithms day to day, and they have a point: you don't need to  understand the laws of quantum physics to use a computer, and yet this daily task rests on a foundation of electrons tunneling between semiconductors of different types.</p> <p>[insert picture of RAM DIMMs] [insert picture of RAM grid]</p> <p>Underlying all algorithmic analysis on all modern computers that you can use today is the RAM Model, which stands for (Random Access Memory). Other than being the greatest techno album of all time from Daft Punk, Random Access Memory means that \"constant-time access to any address.\" Whether you want to  read address </p>"},{"location":"chapter-01/chapter_1/#arrays","title":"Arrays","text":"<p>An array is the \"bare metal\" of the RAM Model, the ur-data-structure. It is the most direct access that programmers have to the underlying hardware because it behaves exactly as the memory circuits do: it's a vast contiguous grid of memory locations in sequential order, with address bits being input, and the corresponding data bits being output (if it's a read-only operation) or with data bits being input to overwrite the existing data (if it's a write operation).</p> <p>Think of arrays as a row of lockers or house addresses on a street, with the quirk that the addresses start at 0. The reason is that </p>"},{"location":"chapter-01/chapter_1/#links","title":"Links","text":""},{"location":"chapter-01/chapter_1/#single-double-and-more","title":"Single, Double, and More","text":""}]}